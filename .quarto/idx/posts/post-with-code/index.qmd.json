{"title":"Data-first mentality.","markdown":{"yaml":{"title":"Data-first mentality.","author":"Giordano Rogers","date":"2025-01-02","categories":["programming","philosophy"],"image":"image.jpg"},"containsRefs":false,"markdown":"\n\nCalling Python \"Excel on steroids without the UI\" sells it short. But the framing has merit. Python, like Excel, is a tool to process data.\n\nThe term 'programming language' shapes how we view tools like Python. We often forget that languages are tools. Language turns thought into communication. It's so good at this that we tend to confuse the words with the thoughts temselves. Thus we conflate our vocabulary with our identity\n\nThe same blind spot distorts how programmers view coding languages. To build great software, we should view code less like poetry and more like a campfire. There are efficient and inefficient ways to stack firewood, but the fire—not the wood—is what matters most.\n\nProgrammers often mistake mastery of syntax for mastery of software. We feel accomplished when we learn a new library or expression. But being a great linguist doesn’t make someone a great communicator. Likewise, great code doesn’t guarantee great software. \n\nSoftware revolves around handling data, and data is hard to control. First, you have to get the right data---maybe from users, or the internet. Then you have to transform that data into something useful---maybe a UI, or meaningful statistics.\n\nWhen we think about coding, many of us imagine building 'things'. In reality, we're automating and optimizing processes. Using Excel to make cell C1 divide cell A1 by cell B1 isn't groundbreaking. But show a non-developer some resilient code that does the same, and they’ll think it’s magic.\n\n```{python}\nimport logging\nfrom typing import Union\n\nlogging.basicConfig(level=logging.INFO)\n\ndef divide_two_numbers(numerator: Union[int, float], denominator: Union[int, float]) -> float:\n    \"\"\"Perform division between two numeric values.\n\n    Args:\n        numerator (Union[int, float]): The number to be divided.\n        denominator (Union[int, float]): The number to be divided by.\n\n    Returns:\n        float: The result of dividing `numerator` by `denominator`.\n\n    Raises:\n        TypeError: If either input is not a number.\n        ValueError: If attempting to divide by zero.\n    \"\"\"\n    logging.info(\"Initiating the division process.\")\n\n    # Type validation\n    if not isinstance(numerator, (int, float)):\n        raise TypeError(f\"Invalid type for 'numerator': {type(numerator).__name__}. Expected int or float.\")\n    if not isinstance(denominator, (int, float)):\n        raise TypeError(f\"Invalid type for 'denominator': {type(denominator).__name__}. Expected int or float.\")\n\n    # Check for division by zero\n    if denominator == 0:\n        logging.error(\"Attempted division by zero. This operation is undefined.\")\n        raise ValueError(\"Denominator cannot be zero.\")\n\n    logging.info(f\"Inputs validated: numerator={numerator}, denominator={denominator}. Proceeding with division.\")\n    result = numerator / denominator\n    logging.info(f\"Division completed. Result: {result}\")\n    return result\n\nnumerator = 10.0\ndenominator = 2.0\n\ntry:\n    division_result = divide_two_numbers(numerator, denominator)\n    print(division_result)\nexcept Exception as e:\n    logging.error(f\"An error occurred during division: {e}\")\n```\n\nThis toy example illustrates how a simple task can look complex in code. The input and output of the Excel function and this Python function could be identical. But the Python code looks arcane. It carries a mystique that tends to become a source of inflated pride in coders.\n\nLearning a programming language takes significant effort. When you finally write good software, it feels like you’ve passed an initiation into an exclusive club. In a way, you have.\n\nBut remember, the code itself isn’t what matters most. The data does.\n","srcMarkdownNoYaml":"\n\nCalling Python \"Excel on steroids without the UI\" sells it short. But the framing has merit. Python, like Excel, is a tool to process data.\n\nThe term 'programming language' shapes how we view tools like Python. We often forget that languages are tools. Language turns thought into communication. It's so good at this that we tend to confuse the words with the thoughts temselves. Thus we conflate our vocabulary with our identity\n\nThe same blind spot distorts how programmers view coding languages. To build great software, we should view code less like poetry and more like a campfire. There are efficient and inefficient ways to stack firewood, but the fire—not the wood—is what matters most.\n\nProgrammers often mistake mastery of syntax for mastery of software. We feel accomplished when we learn a new library or expression. But being a great linguist doesn’t make someone a great communicator. Likewise, great code doesn’t guarantee great software. \n\nSoftware revolves around handling data, and data is hard to control. First, you have to get the right data---maybe from users, or the internet. Then you have to transform that data into something useful---maybe a UI, or meaningful statistics.\n\nWhen we think about coding, many of us imagine building 'things'. In reality, we're automating and optimizing processes. Using Excel to make cell C1 divide cell A1 by cell B1 isn't groundbreaking. But show a non-developer some resilient code that does the same, and they’ll think it’s magic.\n\n```{python}\nimport logging\nfrom typing import Union\n\nlogging.basicConfig(level=logging.INFO)\n\ndef divide_two_numbers(numerator: Union[int, float], denominator: Union[int, float]) -> float:\n    \"\"\"Perform division between two numeric values.\n\n    Args:\n        numerator (Union[int, float]): The number to be divided.\n        denominator (Union[int, float]): The number to be divided by.\n\n    Returns:\n        float: The result of dividing `numerator` by `denominator`.\n\n    Raises:\n        TypeError: If either input is not a number.\n        ValueError: If attempting to divide by zero.\n    \"\"\"\n    logging.info(\"Initiating the division process.\")\n\n    # Type validation\n    if not isinstance(numerator, (int, float)):\n        raise TypeError(f\"Invalid type for 'numerator': {type(numerator).__name__}. Expected int or float.\")\n    if not isinstance(denominator, (int, float)):\n        raise TypeError(f\"Invalid type for 'denominator': {type(denominator).__name__}. Expected int or float.\")\n\n    # Check for division by zero\n    if denominator == 0:\n        logging.error(\"Attempted division by zero. This operation is undefined.\")\n        raise ValueError(\"Denominator cannot be zero.\")\n\n    logging.info(f\"Inputs validated: numerator={numerator}, denominator={denominator}. Proceeding with division.\")\n    result = numerator / denominator\n    logging.info(f\"Division completed. Result: {result}\")\n    return result\n\nnumerator = 10.0\ndenominator = 2.0\n\ntry:\n    division_result = divide_two_numbers(numerator, denominator)\n    print(division_result)\nexcept Exception as e:\n    logging.error(f\"An error occurred during division: {e}\")\n```\n\nThis toy example illustrates how a simple task can look complex in code. The input and output of the Excel function and this Python function could be identical. But the Python code looks arcane. It carries a mystique that tends to become a source of inflated pride in coders.\n\nLearning a programming language takes significant effort. When you finally write good software, it feels like you’ve passed an initiation into an exclusive club. In a way, you have.\n\nBut remember, the code itself isn’t what matters most. The data does.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"highlight-style":"github-dark","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":["cyborg","../../custom.scss"],"fontsize":"1.3em","monofont":"Courier","title-block-banner":true,"title":"Data-first mentality.","author":"Giordano Rogers","date":"2025-01-02","categories":["programming","philosophy"],"image":"image.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}