{
  "hash": "623599ae9af01a962b644d0e2813b23f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Fourier Series for Modeling Melody\"\nauthor: \"Giordano Rogers\"\ndate: \"2025-01-04\"\ncategories: [music, math]\nimage: \"fourier_graph.svg\"\n---\n\n\n\nA function is mapping of an object in a set to some output.\n\nThe musical notes are a set.\n\nA musical scale is a more narrow set.\n\nAnd rhythms and progressions can be codified down to a generative algorithm.\n\nFor example, take the melody for \"Mary Had a Little Lamb\"\n\nEDCDEEEDDDEGGEDCDEEEEDDEDC\n\nCan we create a function f(x) that computes the proper note if we treat x as the\nnote's index in the sequence?\n\nWhat about a simpler harmony first.\n\n\n```{=html}\n<audio controls>\n  <source src=\"EGEC.wav\" type=\"audio/wav\">\n  Your browser does not support the audio element.\n</audio>\n```\n\n\nThis is a walk up and down the C major chord. We start at E, then up three\nhalf-notes to G, back to E, down three half-notes to C, and then back to E.\n\nIf we express each bar of a four bar loop as a zero indexed array, then we\ncan model this melody as mathematically as the function:\n\n$$\nf(x) = 4 + 3\\sin(\\frac{\\pi}{2}x)\n$$\n\nOr, in python:\n\n::: {#92e27e5b .cell execution_count=1}\n``` {.python .cell-code}\nfrom math import sin, pi\n\ndef egec(index):\n    note = 4 + 3 * sin((pi / 2) * index)\n    return round(note)\n\nnote_list = [egec(index) for index in range(8)]\nprint(note_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4, 7, 4, 1, 4, 7, 4, 1]\n```\n:::\n:::\n\n\nAnd we can graph this melody like so:\n\n![Graph of the EGEC melody function](cool_graph.svg)\n\nIt shouldn't be surprising that we can graph simple melodies like this as sine curves. After all, the MIDI notes on my piano roll in Ableton Live look just like the graph:\n\n![MIDI piano roll of EGEC melody](egec.png)\n\nWhat's interesting about this is that any melody we can functionalize like this,\nwe can generate programmatically.\n\nThink about the whole world of automated music we can make if we can define our\nmelodic taste in such a formal way.\n\nNow obviously, this simple melody would get very boring after some time.\n\nLet's return to thinking about the Mary Had A Little Lamb melody.\n\nHere are the notes again:\n\nEDCDEEEDDDEGGEDCDEEEEDDEDC\n\nHere it is as played on the piano:\n\n\n```{=html}\n<audio controls>\n  <source src=\"mary_had_a_little_lambd.wav\" type=\"audio/wav\">\n  Your browser does not support the audio element.\n</audio>\n```\n\n\nThis melody is not as periodic as the EGEC melody, but there's still enough of\na pattern to it that we can intuitively sense that there must be some way to\nmap it to a function.\n\nLuckily, a similar logic applies.\n\nJust like we used a sin wave to model the transitions in the EGEC melody, we\ncan combine several sin wavs to approximate a function that will get us our\nMary Had A Little Lamb melody too.\n\nThis will involve using the power of the Fourier series.\n\nA Fourier series can approximate any periodic function by summing sine and\ncosine terms.\n\nEven though the Mary Had a Lamb melody isn't periodic, we can \"force\" periodicity by repeating the sequence and using Fourier coefficients to approximate the pattern.\n\n::: {#1e214cea .cell execution_count=2}\n``` {.python .cell-code}\nfrom numpy import arange, linspace, cos, sin, mean\n\n# Define the melody as integers\nmelody = [4, 2, 0, 2, 4, 4, 4, 2, 2, 2, 4, 7, 7,\n          4, 2, 0, 2, 4, 4, 4, 4, 2, 2, 4, 2, 0]\nN = len(melody)  # Number of terms in the melody\nx_vals = arange(0, N)  # Melody indices\n\n# Extend melody for visualization\nrepeats = 3\nextended_melody = melody * repeats\nextended_x_vals = arange(0, N * repeats)\n\n# Compute Fourier series approximation\ndef fourier_series(x, num_terms=10):\n    a0 = mean(melody)  # Mean value (DC component)\n    approx = a0  # Start with the DC component\n    for n in range(1, num_terms + 1):\n        an = (2 / N) * sum(melody * \\\n          cos(2 * pi * n * x_vals / N))\n        bn = (2 / N) * sum(melody * \\\n          sin(2 * pi * n * x_vals / N))\n        approx += an * cos(2 * pi * n * x / N) + \\\n          bn * sin(2 * pi * n * x / N)\n    return approx\n\n# Generate Fourier approximation\nx_approx = linspace(0, N * repeats, 1000)  # Smooth x values\ny_approx = fourier_series(x_approx)\n\n# Generate discrete indices for approximation\ndiscrete_indices = arange(0, N * repeats)  # Integer indices\n\n# Compute Fourier series and round to nearest whole number\ny_discrete_approx = [round(fourier_series(x))\n                     for x in discrete_indices]\n\n# Print the first 16 approximated notes\nprint(\"First 16 Notes of Mary Had a Little Lamb\")\nprint(\"\\nFourier Approximation (Rounded):\")\nprint(y_discrete_approx[:16])\nprint(\"\\nOriginal Melody:\")\nprint(extended_melody[:16])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFirst 16 Notes of Mary Had a Little Lamb\n\nFourier Approximation (Rounded):\n[4, 2, 0, 2, 4, 4, 4, 2, 2, 2, 4, 7, 7, 4, 2, 0]\n\nOriginal Melody:\n[4, 2, 0, 2, 4, 4, 4, 2, 2, 2, 4, 7, 7, 4, 2, 0]\n```\n:::\n:::\n\n\nAnd we can view the graph of the approximated curve too:\n\n![Graph of the Mary Had a Little Lamb melody](fourier_graph.svg)\n\nAnd if we zoom in the graph a bit to see the first cycle of the melody:\n\n![Graph of the first cycle of the Mary Had a Little Lamb melody](fourier_zoomed_graph.svg)\n\nAnd as we'd expect, we can see that it looks pretty similar to the piano roll of the midi notes for Mary Had a Little Lamb that I recorded in Ableton Live:\n\n![MIDI piano roll for Mary Had a Little Lamb](mary_lamb_roll2.png)\n\nAgain though, this Mary Had a Little Lamb melody is very simple compared to the\nmelodies in most of the music people tend to listen to.\n\nBut the beauty of the Fourier series is that we can create curves for many\ndifferent melodies using this same technique, and then we can adjust the curves\nby changing a few parameters, and generate similar but novel melodies with our \nnew adapted curves.\n\nAs a more advanced step, we could combine Fourier methods with neural networks \nto capture non-period and stylistic elements.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}